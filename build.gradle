import java.nio.charset.StandardCharsets

plugins {
    id("com.github.ben-manes.versions") version "0.51.0"
    id("com.github.hierynomus.license-base") version "0.16.1"
}

allprojects {
    group = "org.copper-engine"

    repositories {
        mavenCentral()
    }
}

def getProperSubprojects() {
    subprojects.findAll {
        new File(it.projectDir, 'src/main/java').directory
    }
}

configure(properSubprojects) {
    println "configuring java module " + project.path

    apply plugin: 'java-library'
    apply plugin: 'maven-publish'

    sourceCompatibility = 21
    targetCompatibility = 21

    task createSourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    task createJavadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives createSourcesJar
        archives createJavadocJar
    }

    apply plugin: 'com.github.hierynomus.license'
    license {
        // verify that every java file has our Apache License header; fail build if header is missing
        header file("$rootDir/common/apache-license-file.txt")
        skipExistingHeaders true
        ignoreFailures true
    }

    dependencies {

        implementation("com.github.javaparser:javaparser-symbol-solver-core:$javaparserVersion") {
            exclude module: 'javaparser-symbol-solver-model'
        }

        implementation "org.slf4j:slf4j-api:$slf4jVersion"
        testImplementation("junit:junit:$junitVersion") {
            exclude module: 'hamcrest-core'
        }
        testImplementation "org.mockito:mockito-core:$mockitoVersion"
        testImplementation "net.bytebuddy:byte-buddy:$byteBuddyVersion"
        testImplementation "org.hamcrest:hamcrest-core:$hamcrestVersion"
        testImplementation "ch.qos.logback:logback-classic:$logbackVersion"
    }

    jar {
        manifest.attributes provider: 'gradle'
    }

    javadoc {
        onlyIf { !project.sourceCompatibility.java9Compatible }
        options.encoding = StandardCharsets.UTF_8
        options.addBooleanOption('html5', true)
        exclude '**/module-info.java'
    }

    test {
        testLogging {
            exceptionFormat = 'full'
        }
    }
}

project(':projects:copper-jmx-interface') {
    ext.moduleName = 'org.copperengine.management'

    dependencies {
    }
}


project(':projects:copper-regtest') {
    ext.moduleName = 'org.copperengine.regtest'

    sourceSets {
        workflow {
            ext.srcDir = "$projectDir/src/workflow/java"
        }
    }
    sourceSets.test.resources.srcDirs += sourceSets.workflow.srcDir

    tasks.testClasses.doLast {
        if (project.sourceCompatibility.java9Compatible) {
            copy {
                from sourceSets.test.resources.srcDirs
                into "$buildDir/classes/java/test"
            }
        }
    }

    dependencies {
        implementation project(':projects:copper-coreengine')
        implementation project(':projects:copper-ext')

        implementation "org.ow2.asm:asm:$asmVersion"
        implementation "org.ow2.asm:asm-tree:$asmVersion"
        implementation "org.yaml:snakeyaml:$snakeyamlVersion"
        implementation "org.springframework:spring-jdbc:$springVersion"
        implementation "org.springframework:spring-context:$springVersion"
        implementation "org.springframework:spring-tx:$springVersion"
        implementation "com.google.guava:guava:$guavaVersion"
        testRuntimeOnly fileTree(dir: "$rootDir/3rdPartyLibs", include: '*.jar')

        testImplementation 'mysql:mysql-connector-java:5.1.25'
        testImplementation "org.apache.derby:derby:$derbyVersion"
        testImplementation "postgresql:postgresql:$postgresqlVersion"
        testImplementation "com.h2database:h2:$h2Version"
        testImplementation "com.mchange:c3p0:$c3p0Version"

        testImplementation "org.slf4j:slf4j-api:$slf4jVersion"

    }
}

project(':projects:copper-coreengine') {
    ext.moduleName = 'org.copperengine.core'
    dependencies {
        api project(':projects:copper-jmx-interface')

        implementation("org.slf4j:slf4j-api:$slf4jVersion")

        // asm
        implementation "org.ow2.asm:asm:$asmVersion"
        implementation "org.ow2.asm:asm-commons:$asmVersion"
        implementation "org.ow2.asm:asm-tree:$asmVersion"
        implementation "org.ow2.asm:asm-util:$asmVersion"
        implementation "org.ow2.asm:asm-analysis:$asmVersion"
    }

    task scriptsZip(type: Zip) {
        archiveClassifier = 'scripts'
        from file("src/main/database")
        into 'scripts/sql'
    }
    assemble.dependsOn scriptsZip

    artifacts {
        archives scriptsZip
    }
}

project(':projects:copper-ext') {
    ext.moduleName = 'org.copperengine.ext'
    dependencies {
        implementation project(':projects:copper-coreengine')

        implementation "org.eclipse.jgit:org.eclipse.jgit:$jgitVersion"
        implementation "org.ow2.asm:asm:$asmVersion"
        implementation "org.ow2.asm:asm-tree:$asmVersion"
        implementation "commons-io:commons-io:$commonsIoVersion"
        implementation "com.google.guava:guava:$guavaVersion"
        implementation "org.yaml:snakeyaml:$snakeyamlVersion"

        testImplementation "org.slf4j:slf4j-api:$slf4jVersion"
        //testImplementation 'org.apache.logging.log4j:log4j-core:2.+'
        //testImplementation 'org.slf4j:slf4j-log4j12:2.+'
    }
}