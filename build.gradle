import groovy.xml.QName

import java.nio.charset.StandardCharsets

buildscript {
    repositories {
        gradlePluginPortal() // needed for gradle-nexus-plugin
        mavenCentral() // needed for nexus-workflow plugin
        maven { // needed for license-gradle-plugin
	      url "https://plugins.gradle.org/m2/"
    	}
    }
    dependencies {
        // The nexus plugin makes uploading to Sonatype Nexus repository easier.
        // See https://github.com/bmuschko/gradle-nexus-plugin for documentation
//        classpath 'org.gradle.api.plugins:gradle-nexus-plugin:0.7'
        // The nexus-workflow plugin automates the staging/promotion/release process on Sonatype OSS
        // by providing the task 'nexusStagingRelease'.
        // See https://github.com/adaptivecomputing/plugins-gradle/tree/master/nexus-workflow
        // and http://stackoverflow.com/questions/20432907/automated-release-to-maven-central-with-gradle
//        classpath 'com.adaptc.gradle:nexus-workflow:0.6'
        // the license plugin, see https://github.com/hierynomus/license-gradle-plugin
//        classpath 'gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.13.0'
        // the spotbugs plugin, see https://plugins.gradle.org/plugin/com.github.spotbugs
        // DISABLED: spotbugs is currently not compatible with Gradle 5
        // classpath "gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.6.8"

        // Plugin to create modular jars that target a Java release before 9 (https://github.com/beryx/badass-jar-plugin)
//        classpath "gradle.plugin.org.beryx:badass-jar:1.2.0"

        // Plugin for loading project properties from gradle-local.properties
//        classpath "net.saliman:gradle-properties-plugin:1.5.1"

        // OSGI plugin
//        classpath "biz.aQute.bnd:biz.aQute.bnd.gradle:7.0.0"
    }
}

plugins {
    id("com.github.ben-manes.versions") version "0.51.0"
    id("com.github.hierynomus.license-base") version "0.16.1"
}

allprojects {
    apply plugin: 'project-report'
//    apply plugin: "net.saliman.properties"

    // DISABLED: spotbugs is currently not compatible with Gradle 5
//    apply plugin: "com.github.spotbugs"

    group = "org.copper-engine"

    repositories {
        mavenCentral()
    }
}

def getProperSubprojects() {
    subprojects.findAll {
        new File(it.projectDir, 'src/main/java').directory
    }
}

configure(properSubprojects) {
    println "configuring java module " + project.path

    apply plugin: 'java-library'
//    apply plugin: 'biz.aQute.bnd.builder'

//    apply plugin: "org.beryx.jar"

    compileJava.options.encoding = StandardCharsets.UTF_8
    compileTestJava.options.encoding = StandardCharsets.UTF_8

    apply plugin: 'maven-publish'

    sourceCompatibility = 21
    targetCompatibility = 21

    task createSourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    task createJavadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives createSourcesJar
        archives createJavadocJar
    }

    if (!project.getName().contains('orch-interfaces')) {
        apply plugin: 'com.github.hierynomus.license'
        license {
            // verify that every java file has our Apache License header; fail build if header is missing
            header file("$rootDir/common/apache-license-file.txt")
            skipExistingHeaders true
            ignoreFailures true
        }
    }

//    apply plugin: 'eclipse'
//    eclipse {
//        classpath {
//// TODO           defaultOutputDir = file('build')
//            file {
//                //exclude slf4f log binding from export
//                withXml {
//                    Node root = it.asNode()
//                    NodeList nodeList = root.getAt(new QName('classpathentry'))
//                    nodeList.each { Node classpathentry ->
//                        if (classpathentry.attributes().path.contains('slf4j-log4j12')) {
//                            classpathentry.attributes().remove('exported')
//                        }
//                    }
//                }
//            }
//        }
//        jdt {
//            file {
//                // add our code style settings to every eclipse project
//                withProperties { properties ->
//                    def codestyle = new XmlParser().parse(file("$rootDir/common/eclipse-codestyle.xml"))
//                    codestyle.profile[0].setting.each {
//                        properties.put(it.'@id', it.'@value')
//                    }
//                }
//                whenMerged {
//                    def uiprops = new Properties();
//                    uiprops.put('eclipse.preferences.version', '1')
//                    uiprops.put('formatter_profile', '_SCOOP-CodeStyle')
//                    uiprops.put('formatter_settings_version', '12')
//                    uiprops.store(file("$projectDir/.settings/org.eclipse.jdt.ui.prefs").newWriter(), "generated by build.gradle")
//                }
//            }
//        }
//    }
//    // be sure to always regenerate eclipse files, because default behavior is merging into existing files
//    tasks.eclipse.dependsOn cleanEclipse
// TODO   eclipse.classpath.defaultOutputDir = new File("$buildDir/classes/main")

    dependencies {

        implementation("com.github.javaparser:javaparser-symbol-solver-core:$javaparserVersion") {
            exclude module: 'javaparser-symbol-solver-model'
        }

        implementation	"org.slf4j:slf4j-api:$slf4jVersion"
        testImplementation("junit:junit:$junitVersion") {
            exclude module: 'hamcrest-core'
        }
        testImplementation "org.mockito:mockito-core:$mockitoVersion"
        testImplementation "net.bytebuddy:byte-buddy:$byteBuddyVersion"
        testImplementation "org.hamcrest:hamcrest-core:$hamcrestVersion"
        testImplementation "ch.qos.logback:logback-classic:$logbackVersion"

//        spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.7.1'
    }

    jar {
        manifest.attributes provider: 'gradle'
//        multiRelease = false
    }

    javadoc {
        onlyIf { !project.sourceCompatibility.java9Compatible }
        options.encoding = StandardCharsets.UTF_8
        options.addBooleanOption('html5', true)
        exclude '**/module-info.java'
    }

    test {
        testLogging {
            exceptionFormat = 'full'
        }
    }
}


//configure(rootProject) {
//    // copy Intellij Codestyle settings each time 'gradle assemble' or 'gradle build' is performed on the root project
//    task ideaCodeStyleSetup(type: Copy) {
//        from 'common/intellij-codestyle.xml'
//        into '.idea/'
//        rename '.+', 'codeStyleSettings.xml'
//    }
//    ideaCodeStyleSetup.onlyIf { file(".idea").exists() }
//}

project(':projects:copper-jmx-interface') {
    ext.moduleName = 'org.copperengine.management'

    dependencies {
    }
}


project(':projects:copper-regtest') {
    ext.moduleName = 'org.copperengine.regtest'

    sourceSets {
        workflow {
            ext.srcDir = "$projectDir/src/workflow/java"
        }
    }
    sourceSets.test.resources.srcDirs += sourceSets.workflow.srcDir

    tasks.testClasses.doLast {
        if(project.sourceCompatibility.java9Compatible) {
            copy {
                from sourceSets.test.resources.srcDirs
                into "$buildDir/classes/java/test"
            }
        }
    }

    dependencies {
        implementation project(':projects:copper-coreengine')
        implementation project(':projects:copper-ext')

        implementation "org.ow2.asm:asm:$asmVersion"
        implementation "org.ow2.asm:asm-tree:$asmVersion"
        implementation "org.yaml:snakeyaml:$snakeyamlVersion"
        implementation "org.springframework:spring-jdbc:$springVersion"
        implementation "org.springframework:spring-context:$springVersion"
        implementation "org.springframework:spring-tx:$springVersion"
        implementation "com.google.guava:guava:$guavaVersion"
        testRuntimeOnly fileTree(dir: "$rootDir/3rdPartyLibs", include: '*.jar')

        testImplementation 'mysql:mysql-connector-java:5.1.25'
        testImplementation "org.apache.derby:derby:$derbyVersion"
        testImplementation "postgresql:postgresql:$postgresqlVersion"
        testImplementation "com.h2database:h2:$h2Version"
        testImplementation "com.mchange:c3p0:$c3p0Version"

        testImplementation "org.slf4j:slf4j-api:$slf4jVersion"

    }
}

project(':projects:copper-coreengine') {
    ext.moduleName = 'org.copperengine.core'
    dependencies {
        api project(':projects:copper-jmx-interface')

        implementation("org.slf4j:slf4j-api:$slf4jVersion")

        // asm
        implementation "org.ow2.asm:asm:$asmVersion"
        implementation "org.ow2.asm:asm-commons:$asmVersion"
        implementation "org.ow2.asm:asm-tree:$asmVersion"
        implementation "org.ow2.asm:asm-util:$asmVersion"
        implementation "org.ow2.asm:asm-analysis:$asmVersion"
    }

    task scriptsZip(type: Zip) {
        archiveClassifier = 'scripts'
        from file("src/main/database")
        into 'scripts/sql'
    }
    assemble.dependsOn scriptsZip

    artifacts {
        archives scriptsZip
    }
}

project(':projects:copper-ext') {
    ext.moduleName = 'org.copperengine.ext'
    dependencies {
        implementation project(':projects:copper-coreengine')

        implementation	"org.eclipse.jgit:org.eclipse.jgit:$jgitVersion"
        implementation "org.ow2.asm:asm:$asmVersion"
        implementation "org.ow2.asm:asm-tree:$asmVersion"
        implementation "commons-io:commons-io:$commonsIoVersion"
        implementation "com.google.guava:guava:$guavaVersion"
        implementation "org.yaml:snakeyaml:$snakeyamlVersion"

        testImplementation "org.slf4j:slf4j-api:$slf4jVersion"
        //testImplementation 'org.apache.logging.log4j:log4j-core:2.+'
        //testImplementation 'org.slf4j:slf4j-log4j12:2.+'
    }
}

subprojects {
    task allDeps(type: DependencyReportTask) {}
}